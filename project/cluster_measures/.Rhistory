print(dataVal)
zNormalizedDataList=NULL
zNormalizedDataList<-doZScoreNormalization(dataVal)
print("After Z-Score normalization the list becomes: ")
print(zNormalizedDataList)
print("#####################Plotting Time###############")
heightVec<-c(5.6, 5.8, 5.4, 6.1, 5.9)
weightVec<-c(150, 155, 145, 180, 175)
plot(weightVec, heightVec, main="Height&Weight",
xlab="Height ", ylab="Weight", pch=19)
print("################Pair Wise Distance############")
createMatrix<- function(heightVecP, weightVecP)
{
tempMat<- matrix(nrow=5, ncol=2)
returnMat<- matrix(nrow=5, ncol=2)
for (j in 1:length(heightVecP) )
{
tempMat[j,1] = heightVec[j]
tempMat[j,2] = weightVec[j]
}
returnMat<-tempMat
}
theMatrix<-createMatrix(heightVec, weightVec)
print("The matrix is: ")
print(theMatrix)
install.packages("flexclust")
library(flexclust)
#pDistOutput<-dist(theMatrix, method = "euclidean", diag = FALSE, upper = FALSE)
pDistOutput <-dist2(theMatrix, theMatrix, method = "euclidean", p=2)
print("P dist output is ...")
print(pDistOutput)
#dataList<-{55, 23, 28, 32, 18, 68, 72, 89, 98, 100}
dataVal <- c(55, 23, 28, 32, 18, 68, 72, 89, 98, 100)
#print(dataVal)
doMinMaxNormalization<- function(dataListParam)
{
normalizedDataVal=NULL
minRange=min(dataListParam)
maxRange=max(dataListParam)
newMinRange=0
newMaxRange=255
#print(minRange)
for (i in 1:length(dataListParam) )
{
normalizedDataVal[i] =  (((dataListParam[i] - minRange)/(maxRange - minRange)) * (newMaxRange - newMinRange)) + newMinRange
}
returnMinMaxList<-normalizedDataVal
}
print("original list")
print(dataVal)
minMaxNormalizedDataList<-doMinMaxNormalization(dataVal)
print("After min-max normalization the list becomes: ")
print(minMaxNormalizedDataList)
doZScoreNormalization<- function(dataListParam)
{
normalizedTempDataVal=NULL
mean_ = mean(dataListParam)
stdDev_ = sd(dataListParam, na.rm = TRUE)
for (i in 1:length(dataListParam) )
{
normalizedTempDataVal[i] =  (dataListParam[i] - mean_) / stdDev_
}
returnZList<-normalizedTempDataVal
}
print("Another transformation ...")
print("original list")
print(dataVal)
zNormalizedDataList=NULL
zNormalizedDataList<-doZScoreNormalization(dataVal)
print("After Z-Score normalization the list becomes: ")
print(zNormalizedDataList)
print("#####################Plotting Time###############")
heightVec<-c(5.6, 5.8, 5.4, 6.1, 5.9)
weightVec<-c(150, 155, 145, 180, 175)
nrmHeightvec<-doZScoreNormalization(heightVec)
nrmWeightvec<-doZScoreNormalization(weightVec)
plot(nrmHeightvec, nrmWeightvec, main="HeightVs.Weight",
xlab="Height ", ylab="Weight", pch=19)
print("################Pair Wise Distance############")
createMatrix<- function(heightVecP, weightVecP)
{
tempMat<- matrix(nrow=5, ncol=2)
returnMat<- matrix(nrow=5, ncol=2)
for (j in 1:length(heightVecP) )
{
tempMat[j,1] = heightVec[j]
tempMat[j,2] = weightVec[j]
}
returnMat<-tempMat
}
theMatrix<-createMatrix(nrmHeightvec, nrmWeightvec)
print("The matrix is: ")
print(theMatrix)
install.packages("flexclust")
library(flexclust)
#pDistOutput<-dist(theMatrix, method = "euclidean", diag = FALSE, upper = FALSE)
pDistOutput <-dist2(theMatrix, theMatrix, method = "euclidean", p=2)
print("P dist output is ...")
print(pDistOutput)
setwd("~/Documents/Spring-2016/CSC522/gitRepo/project/cluster_measures")
risk_score_values = read.csv("scores_for_clustering_measure.csv", header = F)
summary(risk_score_values)
risk_score_values = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score_values)
print(risk_score_values)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
summary(risk_score_value)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
summary(risk_score_value)
print("##### Cluster Analysis #####")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
summary(risk_score_value)
print("##### Cluster Analysis #####")
intern <- clValid(risk_score_value, 0, clMethods=c("hierarchical","kmeans","pam"), validation="internal")
install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
summary(risk_score_value)
print("##### Cluster Analysis #####")
intern <- clValid(risk_score_value, 0, clMethods=c("hierarchical","kmeans","pam"), validation="internal")
install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
#risk_score_value=risk_score$V1
summary(risk_score_value)
print("##### Cluster Analysis #####")
intern <- clValid(risk_score, 0:1, clMethods=c("hierarchical","kmeans","pam"), validation="internal")
install.packages("clValid")
install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
summary(risk_score_value)
print("##### Cluster Analysis #####")
intern <- clValid(risk_score_value,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
summary(risk_score_value)
print("##### Cluster Analysis #####")
print(risk_score_value)
#intern <- clValid(risk_score_value,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
install.packages("clValid")
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
summary(risk_score_value)
print("##### Cluster Analysis #####")
print(risk_score_value)
#intern <- clValid(risk_score_value,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
summary(risk_score_value)
print("##### Cluster Analysis #####")
print(dim(risk_score_value))
#intern <- clValid(risk_score_value,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
summary(risk_score_value)
print("##### Cluster Analysis #####")
print(nrow(risk_score_value))
print(ncol(risk_score_value))
#intern <- clValid(risk_score_value,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
summary(risk_score_value)
print("##### Cluster Analysis #####")
print(nrow(risk_score))
print(ncol(risk_score))
#intern <- clValid(risk_score_value,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
summary(risk_score_value)
print("##### Cluster Analysis #####")
#print(nrow(risk_score))
#print(ncol(risk_score))
intern <- clValid(risk_score, 0, clMethods=c("hierarchical","kmeans","pam"), validation="internal")
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
summary(risk_score_value)
print("##### Cluster Analysis #####")
df_risk_score_value <- as.data.frame.table(risk_score_value)
head(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
#intern <- clValid(risk_score, 0, clMethods=c("hierarchical","kmeans","pam"), validation="internal")
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
summary(risk_score_value)
print("##### Cluster Analysis #####")
df_risk_score_value <- as.data.frame(risk_score_value)
head(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
#intern <- clValid(risk_score, 0, clMethods=c("hierarchical","kmeans","pam"), validation="internal")
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
print("##### Cluster Analysis #####")
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
#intern <- clValid(risk_score, 0, clMethods=c("hierarchical","kmeans","pam"), validation="internal")
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
print("##### Cluster Analysis #####")
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
intern <- clValid(df_risk_score_value,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
print("##### Cluster Analysis #####")
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
intern <- clValid(df_risk_score_value, 2:13,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
print("##### Cluster Analysis #####")
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
rownames(df_risk_score_value) <- "Risk_Score"
intern <- clValid(df_risk_score_value, 2:13,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
print("##### Cluster Analysis #####")
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
#rownames(df_risk_score_value) <- "Risk_Score"
internal_summary <- clValid(df_risk_score_value, 2:13,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
summary(internal_summary)
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
print("##### Cluster Analysis #####")
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
#rownames(df_risk_score_value) <- "Risk_Score"
internal_summary <- clValid(df_risk_score_value, 2:25,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
summary(internal_summary)
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
print("##### Cluster Analysis #####")
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
#rownames(df_risk_score_value) <- "Risk_Score"
#internal_summary <- clValid(df_risk_score_value, 2:13,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
internal_summary <- clValid(df_risk_score_value, 2:13,  clMethods=c("hierarchical"), validation="internal")
summary(internal_summary)
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
print("##### Cluster Analysis #####")
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
#summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
#rownames(df_risk_score_value) <- "Risk_Score"
#internal_summary <- clValid(df_risk_score_value, 2:13,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
internal_summary <- clValid(df_risk_score_value, 1:12,  clMethods=c("hierarchical"), validation="internal")
summary(internal_summary)
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
print("##### Cluster Analysis #####")
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
#summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
#rownames(df_risk_score_value) <- "Risk_Score"
#internal_summary <- clValid(df_risk_score_value, 2:13,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
internal_summary <- clValid(df_risk_score_value, 2:12,  clMethods=c("hierarchical"), validation="internal")
summary(internal_summary)
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
#print("##### Cluster Analysis #####")
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
#summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
#rownames(df_risk_score_value) <- "Risk_Score"
#internal_summary <- clValid(df_risk_score_value, 2:13,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
internal_summary <- clValid(df_risk_score_value, 2:12,  clMethods=c("hierarchical"), validation="internal")
summary(internal_summary)
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
#summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
#rownames(df_risk_score_value) <- "Risk_Score"
#internal_summary <- clValid(df_risk_score_value, 2:13,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
print("##### Cluster Analysis: Internal Validity #####")
internal_summary <- clValid(df_risk_score_value, 2:12,  clMethods=c("hierarchical"), validation="internal")
summary(internal_summary)
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
#summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
#rownames(df_risk_score_value) <- "Risk_Score"
#internal_summary <- clValid(df_risk_score_value, 2:13,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
print("##### Cluster Analysis: Internal Validity #####")
internal_summary <- clValid(df_risk_score_value, 2:12,  clMethods=c("hierarchical"), validation="internal")
summary(internal_summary)
print("##### Cluster Analysis: Stability #####")
stability_summary <- clValid(df_risk_score_value, 2:12,  clMethods=c("hierarchical"), validation="stability")
summary(stability_summary)
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
#summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
#rownames(df_risk_score_value) <- "Risk_Score"
#internal_summary <- clValid(df_risk_score_value, 2:13,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
print("##### Cluster Analysis: Internal Validity #####")
internal_summary <- clValid(df_risk_score_value, 2:12,  clMethods=c("hierarchical"), validation="internal")
summary(internal_summary)
op <- par(no.readonly = TRUE)
plot(intern, legend = FALSE)
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
#summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
#rownames(df_risk_score_value) <- "Risk_Score"
#internal_summary <- clValid(df_risk_score_value, 2:13,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
print("##### Cluster Analysis: Internal Validity #####")
internal_summary <- clValid(df_risk_score_value, 2:12,  clMethods=c("hierarchical"), validation="internal")
summary(internal_summary)
print("##### Cluster Analysis: Biological Validity #####")
biological_summary <- clValid(df_risk_score_value, 2:12,  clMethods=c("hierarchical"), validation="biological")
summary(biological_summary)
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
#summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
#rownames(df_risk_score_value) <- "Risk_Score"
#internal_summary <- clValid(df_risk_score_value, 2:13,  clMethods=c("hierarchical","kmeans","pam"), validation="internal")
print("##### Cluster Analysis: Internal Validity #####")
internal_summary <- clValid(df_risk_score_value, 2:12,  clMethods=c("hierarchical"), validation="internal")
summary(internal_summary)
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
#summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
print("##### Cluster Analysis: Internal Validity #####")
internal_summary <- clValid(df_risk_score_value, 2:12,  clMethods=c("hierarchical"), validation="internal")
print("----- Summary -----")
summary(internal_summary)
print("----- Details -----")
print(internal_summary)
setwd("~/Documents/Spring-2016/CSC522/gitRepo/project/cluster_measures")
#install.packages("clValid")
library(clValid)
risk_score = read.csv("scores_for_clustering_measure.csv", header = F)
#summary(risk_score)
#print(risk_score)
risk_score_value=risk_score$V1
df_risk_score_value <- as.data.frame(risk_score_value)
#head(df_risk_score_value)
#summary(df_risk_score_value)
#print(nrow(risk_score))
#print(ncol(risk_score))
print("##### Cluster Analysis: Internal Validity #####")
internal_summary <- clValid(df_risk_score_value, 2:100,  clMethods=c("hierarchical"), validation="internal")
print("----- Summary -----")
summary(internal_summary)
print("----- Details -----")
print(internal_summary)
