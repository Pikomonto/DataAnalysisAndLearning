rm(list=ls(all=T))
library(graphics)
library(car)
library(plotrix)
generateClassForTestSample<- function(train_file_param, sample_param)
{
### the list for holding final values
list_for_g <- list()
###
rgb_training_data = read.csv(train_file_param, sep=",")
rgb_training_data_matrix = as.matrix(rgb_training_data)
#print(rgb_training_data_matrix$R)
rgb_classes=rgb_training_data$Class
#print(rgb_classes)
classes=unique(rgb_classes)
#print(classes)
for (classCount in 1:length(classes) )
{
#print(rgb_training_data_matrix)
### no of total samples satrted
no_of_samples_total=nrow(rgb_training_data_matrix)
#print(no_of_samples_total)
### no of total samples ended
classOfInterest =  classes[classCount]
#print("-----")
#print(classOfInterest)
full_sub_matrix_for_class =  rgb_training_data_matrix[rgb_training_data_matrix[, "Class"] == classOfInterest,]
#print(full_sub_matrix_for_class)
with_header_rgb_sub_matrix_for_class<-as.matrix(full_sub_matrix_for_class[,-4])
rgb_sub_matrix_for_class <- matrix(with_header_rgb_sub_matrix_for_class, ncol = ncol(with_header_rgb_sub_matrix_for_class), dimnames = NULL)
#print(rgb_sub_matrix_for_class)
## no. of actual samples fro class started
no_of_samples_for_class=nrow(rgb_sub_matrix_for_class)
#print(no_of_samples_for_class)
## no of actual samples for class ended
### proba. of each class started
proba_class  =  no_of_samples_for_class / no_of_samples_total
#print(proba_class)
### proba. of each class ended
###covariance started
cov_rgb_for_class = cov(rgb_sub_matrix_for_class, y=rgb_sub_matrix_for_class)
#print(cov_rgb_for_class)
###covariance ended
# mean of 'R' in 'RGB' for class started
r_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 1]
mean_r_for_class = mean(r_rgb_sub_matrix_for_class)
std_r_for_class = sd(r_rgb_sub_matrix_for_class)
#print(std_r_for_class)
# mean of 'R' in 'RGB' for class ended
# mean of 'G' in 'RGB' for class started
g_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 2]
mean_g_for_class = mean(g_rgb_sub_matrix_for_class)
std_g_for_class = sd(g_rgb_sub_matrix_for_class)
#print(mean_g_for_class)
# mean of 'G' in 'RGB' for class ended
# mean of 'B' in 'RGB' for class started
b_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 3]
mean_b_for_class = mean(b_rgb_sub_matrix_for_class)
std_b_for_class = sd(b_rgb_sub_matrix_for_class)
#print(mean_b_for_class)
# mean of 'B' in 'RGB' for class ended
# Determinant of covariance started
det_cov_rgb_for_class = det(cov_rgb_for_class)
#print(det_cov_rgb_for_class)
# Detrminant of covariance ended
# Inverse of covariance started
inv_cov_rgb_for_class = solve(cov_rgb_for_class)
#print(inv_cov_rgb_for_class)
# Incverse of covariance ended
## mu_i matrix constructed
mu_matrix_for_class = matrix(c(mean_r_for_class, mean_g_for_class, mean_b_for_class), nrow=3, ncol=1, byrow = TRUE)
#print(mu_matrix_for_class)
### subtraction from test sample by mu_matrix
subtracted_matrix = sample_param - mu_matrix_for_class
#print(subtracted_matrix)
transposed_subtracted_mat_for_class  = t(subtracted_matrix)
#print(transposed_mu_mat_for_class)
## mu_i matrix ended
### test multiplication of matrices started
# formula:
the_g_ = -0.5*(transposed_subtracted_mat_for_class %*%  inv_cov_rgb_for_class %*% subtracted_matrix) +
log(proba_class) -
(no_of_samples_total/2) * log(2*pi)  -
0.5*(log(det_cov_rgb_for_class))
#print(the_g_)
### test multiplication of matrices ended
#if (the_miltipled_ >=100.00)
#{
#print("blah blah")
#print(the_miltipled_)
#}
##### ln(det_matrix) started
#ln_determinant_class  = log(det_cov_rgb_for_class)
#print(ln_determinant_class)
##### ln(det_matrix) ended
### list population started
list_for_g[[classOfInterest]]<-the_g_
### list population ended
#print("-----")
### plotting zone ####
### plot list constructed ###
#mean_list_for_class = list(mean_r_for_class, mean_g_for_class , mean_b_for_class)
#std_list_for_class = list(std_r_for_class, std_g_for_class , std_b_for_class)
#persp(x = seq(0, 1, length.out = nrow(cov_rgb_for_class)), y = seq(0, 1, length.out = ncol(cov_rgb_for_class)), cov_rgb_for_class, main="Cov. matrix plot", col="lightblue", border=NA, cex.lab=1.5, axes=F)
#contour(x = seq(0, 500, length.out = nrow(cov_rgb_for_class)), y = seq(0, 500, length.out = ncol(cov_rgb_for_class)), cov_rgb_for_class, main="Cov. matrix plot", col="black",  xlab="x", ylab="y", cex.lab=1.5, axes=T)
#ellipse(c(0, 0), shape=cov_rgb_for_class, radius=0.98, col="red", lty=2)
r_g_matrix_for_class <- rgb_sub_matrix_for_class[, -1]
#print(r_g_matrix_for_class)
plot_cov_r_g_matrix = cov(r_g_matrix_for_class, y=r_g_matrix_for_class)
#draw.ellipse(x, y, a = 1, b = 1, angle = 0, segment = c(0, 360),
#             arc.only = TRUE, deg = TRUE, nv = 100, border = NULL, col = NA, lty = 1)
#ellipse(c(mean_r_for_class, mean_g_for_class), shape=plot_cov_r_g_matrix, radius=0.98, col="blue", lty=2)
#plot.new()
str1 <- "Covariance plot for-"
str2 <- toString(classOfInterest)
titileStr <- paste(str1, str2, sep = "")
#plot(c(0,100), c(0,100), type="n", main=titileStr)
#draw.ellipse(plot_cov_r_g_matrix, a=10, b=10,  border=1, angle=c(45,0), lty=3)
#A <- matrix(c(2.2, 0.4, 0.4, 2.8), nrow=2)
#print("R & G Matrix For Class")
if ( classOfInterest==1) {
color = "red"
} else if ( classOfInterest==2) {
color = "green"
} else if ( classOfInterest==3) {
color = "blue"
} else if ( classOfInterest==4) {
color = "pink"
}else
color = "black"
#print(titileStr)
ellipse(c(mean_r_for_class, mean_g_for_class), shape=plot_cov_r_g_matrix, radius=0.98, col=color, lty=2, add=FALSE)
### plot list ended ###
### ####
}
#print("###### The list ######")
#print(list_for_g)
max_of_score = which.max(list_for_g)
#print(max_of_score)
return(max_of_score)
}
generateConfMatrixFromtestFile<- function(train_file_param, test_file_param)
{
test_data = read.csv(test_file_param, sep=",")
test_data_matrix = as.matrix(test_data)
test_classes=test_data$Class
u_test_classes=unique(test_classes)
#print(u_test_classes)
for (u_classCount in 1:length(u_test_classes) )
{
no_of_test_samples_total=nrow(test_data_matrix)
#print(no_of_test_samples_total)
classOfInterest_ =  u_test_classes[u_classCount]
#print(classOfInterest_)
full_sub_matrix_for_class =  test_data_matrix[test_data_matrix[, "Class"] == classOfInterest_,]
#print(full_sub_matrix_for_class)
with_header_test_sub_matrix_for_class<-as.matrix(full_sub_matrix_for_class[,-4])
#print(with_header_test_sub_matrix_for_class)
test_sub_matrix_for_class <- matrix(with_header_test_sub_matrix_for_class, ncol = ncol(with_header_test_sub_matrix_for_class), dimnames = NULL)
#print(test_sub_matrix_for_class)
no_of_test_samples_for_class=nrow(test_sub_matrix_for_class)
#print(no_of_test_samples_for_class)
correctlyPredicted <-0
for(rowIndex in 1:no_of_test_samples_for_class)
{
sample_ = test_sub_matrix_for_class[rowIndex, ]
#print(sample_)
sample_to_test = matrix(c(sample_[[1]], sample_[[2]], sample_[[3]]), nrow=3, ncol=1, byrow = TRUE)
#print(sample_to_test)
predictedClass = generateClassForTestSample(train_file_param, sample_to_test)
if(identical(predictedClass, classOfInterest_))
{
correctlyPredicted = correctlyPredicted + 1
}
}
print("The class of interest ... ")
print(classOfInterest_)
print("Total test samples are ")
print(no_of_test_samples_for_class)
print("Total correct no.  of predictions are ")
print(correctlyPredicted)
no_of_test_samples_for_class = 0
print("---------------")
}
}
train_file_="img-train.txt"
#test_sample = matrix(c(105, 120, 105), nrow=3, ncol=1, byrow = TRUE)
#predictedClass = generateClassForTestSample(train_file_, test_sample)
test_file_param="img-test.txt"
generateConfMatrixFromtestFile(train_file_, test_file_param)
source('~/Documents/Spring-2016/CSC522/gitRepo/homeworks/HW4/hw4all/mlc.R', echo=TRUE)
