### the list for holding final values
list_for_g <- list()
###
rgb_training_data = read.csv("hw4all/img-train.txt", sep=",")
rgb_training_data_matrix = as.matrix(rgb_training_data)
#print(rgb_training_data_matrix$R)
rgb_classes=rgb_training_data$Class
#print(rgb_classes)
classes=unique(rgb_classes)
#print(classes)
for (classCount in 1:length(classes) )
{
#print(rgb_training_data_matrix)
### no of total samples satrted
no_of_samples_total=nrow(rgb_training_data_matrix)
#print(no_of_samples_total)
### no of total samples ended
classOfInterest =  classes[classCount]
#print("-----")
#print(classOfInterest)
full_sub_matrix_for_class =  rgb_training_data_matrix[rgb_training_data_matrix[, "Class"] == classOfInterest,]
#print(full_sub_matrix_for_class)
with_header_rgb_sub_matrix_for_class<-as.matrix(full_sub_matrix_for_class[,-4])
rgb_sub_matrix_for_class <- matrix(with_header_rgb_sub_matrix_for_class, ncol = ncol(with_header_rgb_sub_matrix_for_class), dimnames = NULL)
#print(rgb_sub_matrix_for_class)
## no. of actual samples fro class started
no_of_samples_for_class=nrow(rgb_sub_matrix_for_class)
#print(no_of_samples_for_class)
## no of actual samples for class ended
### proba. of each class started
proba_class  =  no_of_samples_for_class / no_of_samples_total
#print(proba_class)
### proba. of each class ended
###covariance started
cov_rgb_for_class = cov(rgb_sub_matrix_for_class, y=rgb_sub_matrix_for_class)
#print(cov_rgb_for_class)
###covariance ended
# mean of 'R' in 'RGB' for class started
r_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 1]
mean_r_for_class = mean(r_rgb_sub_matrix_for_class)
#print(mean_r_for_class)
# mean of 'R' in 'RGB' for class ended
# mean of 'G' in 'RGB' for class started
g_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 2]
mean_g_for_class = mean(g_rgb_sub_matrix_for_class)
#print(mean_g_for_class)
# mean of 'G' in 'RGB' for class ended
# mean of 'B' in 'RGB' for class started
b_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 3]
mean_b_for_class = mean(b_rgb_sub_matrix_for_class)
#print(mean_b_for_class)
# mean of 'B' in 'RGB' for class ended
# Determinant of covariance started
det_cov_rgb_for_class = det(cov_rgb_for_class)
#print(det_cov_rgb_for_class)
# Detrminant of covariance ended
# Inverse of covariance started
inv_cov_rgb_for_class = solve(cov_rgb_for_class)
#print(inv_cov_rgb_for_class)
# Incverse of covariance ended
## mu_i matrix constructed
mu_matrix_for_class = matrix(c(mean_r_for_class, mean_g_for_class, mean_b_for_class), nrow=3, ncol=1, byrow = TRUE)
#print(mu_matrix_for_class)
### subtraction from test sample by mu_matrix
subtracted_matrix = sample_param - mu_matrix_for_class
#print(subtracted_matrix)
transposed_subtracted_mat_for_class  = t(subtracted_matrix)
#print(transposed_mu_mat_for_class)
## mu_i matrix ended
### test multiplication of matrices started
# formula:
the_g_ = -0.5*(transposed_subtracted_mat_for_class %*%  inv_cov_rgb_for_class %*% subtracted_matrix) +
log(proba_class) -
(no_of_samples_total/2) * log(2*pi)  -
0.5*(log(det_cov_rgb_for_class))
#print(the_g_)
### test multiplication of matrices ended
#if (the_miltipled_ >=100.00)
#{
#print("blah blah")
#print(the_miltipled_)
#}
##### ln(det_matrix) started
#ln_determinant_class  = log(det_cov_rgb_for_class)
#print(ln_determinant_class)
##### ln(det_matrix) ended
### list population started
list_for_g[[classOfInterest]]<-the_g_
### list population ended
#print("-----")
}
#print("###### The list ######")
#print(list_for_g)
max_of_score = which.max(list_for_g)
#print(max_of_score)
return(max_of_score)
}
test_sample = matrix(c(75, 75, 75), nrow=3, ncol=1, byrow = TRUE)
predictedClass = generateClassForTestSample(test_sample)
sprintf("Predcited class is %s", predictedClass)
rm(list=ls(all=T))
generateClassForTestSample<- function(sample_param)
{
### the list for holding final values
list_for_g <- list()
###
rgb_training_data = read.csv("hw4all/img-train.txt", sep=",")
rgb_training_data_matrix = as.matrix(rgb_training_data)
#print(rgb_training_data_matrix$R)
rgb_classes=rgb_training_data$Class
#print(rgb_classes)
classes=unique(rgb_classes)
#print(classes)
for (classCount in 1:length(classes) )
{
#print(rgb_training_data_matrix)
### no of total samples satrted
no_of_samples_total=nrow(rgb_training_data_matrix)
#print(no_of_samples_total)
### no of total samples ended
classOfInterest =  classes[classCount]
#print("-----")
#print(classOfInterest)
full_sub_matrix_for_class =  rgb_training_data_matrix[rgb_training_data_matrix[, "Class"] == classOfInterest,]
#print(full_sub_matrix_for_class)
with_header_rgb_sub_matrix_for_class<-as.matrix(full_sub_matrix_for_class[,-4])
rgb_sub_matrix_for_class <- matrix(with_header_rgb_sub_matrix_for_class, ncol = ncol(with_header_rgb_sub_matrix_for_class), dimnames = NULL)
#print(rgb_sub_matrix_for_class)
## no. of actual samples fro class started
no_of_samples_for_class=nrow(rgb_sub_matrix_for_class)
#print(no_of_samples_for_class)
## no of actual samples for class ended
### proba. of each class started
proba_class  =  no_of_samples_for_class / no_of_samples_total
#print(proba_class)
### proba. of each class ended
###covariance started
cov_rgb_for_class = cov(rgb_sub_matrix_for_class, y=rgb_sub_matrix_for_class)
#print(cov_rgb_for_class)
###covariance ended
# mean of 'R' in 'RGB' for class started
r_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 1]
mean_r_for_class = mean(r_rgb_sub_matrix_for_class)
#print(mean_r_for_class)
# mean of 'R' in 'RGB' for class ended
# mean of 'G' in 'RGB' for class started
g_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 2]
mean_g_for_class = mean(g_rgb_sub_matrix_for_class)
#print(mean_g_for_class)
# mean of 'G' in 'RGB' for class ended
# mean of 'B' in 'RGB' for class started
b_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 3]
mean_b_for_class = mean(b_rgb_sub_matrix_for_class)
#print(mean_b_for_class)
# mean of 'B' in 'RGB' for class ended
# Determinant of covariance started
det_cov_rgb_for_class = det(cov_rgb_for_class)
#print(det_cov_rgb_for_class)
# Detrminant of covariance ended
# Inverse of covariance started
inv_cov_rgb_for_class = solve(cov_rgb_for_class)
#print(inv_cov_rgb_for_class)
# Incverse of covariance ended
## mu_i matrix constructed
mu_matrix_for_class = matrix(c(mean_r_for_class, mean_g_for_class, mean_b_for_class), nrow=3, ncol=1, byrow = TRUE)
#print(mu_matrix_for_class)
### subtraction from test sample by mu_matrix
subtracted_matrix = sample_param - mu_matrix_for_class
#print(subtracted_matrix)
transposed_subtracted_mat_for_class  = t(subtracted_matrix)
#print(transposed_mu_mat_for_class)
## mu_i matrix ended
### test multiplication of matrices started
# formula:
the_g_ = -0.5*(transposed_subtracted_mat_for_class %*%  inv_cov_rgb_for_class %*% subtracted_matrix) +
log(proba_class) -
(no_of_samples_total/2) * log(2*pi)  -
0.5*(log(det_cov_rgb_for_class))
#print(the_g_)
### test multiplication of matrices ended
#if (the_miltipled_ >=100.00)
#{
#print("blah blah")
#print(the_miltipled_)
#}
##### ln(det_matrix) started
#ln_determinant_class  = log(det_cov_rgb_for_class)
#print(ln_determinant_class)
##### ln(det_matrix) ended
### list population started
list_for_g[[classOfInterest]]<-the_g_
### list population ended
#print("-----")
}
#print("###### The list ######")
#print(list_for_g)
max_of_score = which.max(list_for_g)
#print(max_of_score)
return(max_of_score)
}
test_sample = matrix(c(75, 75, 75), nrow=3, ncol=1, byrow = TRUE)
predictedClass = generateClassForTestSample(test_sample)
sprintf("Predcited class is %s", predictedClass)
rm(list=ls(all=T))
generateClassForTestSample<- function(sample_param)
{
### the list for holding final values
list_for_g <- list()
###
rgb_training_data = read.csv("hw4all/img-train.txt", sep=",")
rgb_training_data_matrix = as.matrix(rgb_training_data)
#print(rgb_training_data_matrix$R)
rgb_classes=rgb_training_data$Class
#print(rgb_classes)
classes=unique(rgb_classes)
#print(classes)
for (classCount in 1:length(classes) )
{
#print(rgb_training_data_matrix)
### no of total samples satrted
no_of_samples_total=nrow(rgb_training_data_matrix)
#print(no_of_samples_total)
### no of total samples ended
classOfInterest =  classes[classCount]
#print("-----")
#print(classOfInterest)
full_sub_matrix_for_class =  rgb_training_data_matrix[rgb_training_data_matrix[, "Class"] == classOfInterest,]
#print(full_sub_matrix_for_class)
with_header_rgb_sub_matrix_for_class<-as.matrix(full_sub_matrix_for_class[,-4])
rgb_sub_matrix_for_class <- matrix(with_header_rgb_sub_matrix_for_class, ncol = ncol(with_header_rgb_sub_matrix_for_class), dimnames = NULL)
#print(rgb_sub_matrix_for_class)
## no. of actual samples fro class started
no_of_samples_for_class=nrow(rgb_sub_matrix_for_class)
#print(no_of_samples_for_class)
## no of actual samples for class ended
### proba. of each class started
proba_class  =  no_of_samples_for_class / no_of_samples_total
#print(proba_class)
### proba. of each class ended
###covariance started
cov_rgb_for_class = cov(rgb_sub_matrix_for_class, y=rgb_sub_matrix_for_class)
#print(cov_rgb_for_class)
###covariance ended
# mean of 'R' in 'RGB' for class started
r_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 1]
mean_r_for_class = mean(r_rgb_sub_matrix_for_class)
#print(mean_r_for_class)
# mean of 'R' in 'RGB' for class ended
# mean of 'G' in 'RGB' for class started
g_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 2]
mean_g_for_class = mean(g_rgb_sub_matrix_for_class)
#print(mean_g_for_class)
# mean of 'G' in 'RGB' for class ended
# mean of 'B' in 'RGB' for class started
b_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 3]
mean_b_for_class = mean(b_rgb_sub_matrix_for_class)
#print(mean_b_for_class)
# mean of 'B' in 'RGB' for class ended
# Determinant of covariance started
det_cov_rgb_for_class = det(cov_rgb_for_class)
#print(det_cov_rgb_for_class)
# Detrminant of covariance ended
# Inverse of covariance started
inv_cov_rgb_for_class = solve(cov_rgb_for_class)
#print(inv_cov_rgb_for_class)
# Incverse of covariance ended
## mu_i matrix constructed
mu_matrix_for_class = matrix(c(mean_r_for_class, mean_g_for_class, mean_b_for_class), nrow=3, ncol=1, byrow = TRUE)
#print(mu_matrix_for_class)
### subtraction from test sample by mu_matrix
subtracted_matrix = sample_param - mu_matrix_for_class
#print(subtracted_matrix)
transposed_subtracted_mat_for_class  = t(subtracted_matrix)
#print(transposed_mu_mat_for_class)
## mu_i matrix ended
### test multiplication of matrices started
# formula:
the_g_ = -0.5*(transposed_subtracted_mat_for_class %*%  inv_cov_rgb_for_class %*% subtracted_matrix) +
log(proba_class) -
(no_of_samples_total/2) * log(2*pi)  -
0.5*(log(det_cov_rgb_for_class))
#print(the_g_)
### test multiplication of matrices ended
#if (the_miltipled_ >=100.00)
#{
#print("blah blah")
#print(the_miltipled_)
#}
##### ln(det_matrix) started
#ln_determinant_class  = log(det_cov_rgb_for_class)
#print(ln_determinant_class)
##### ln(det_matrix) ended
### list population started
list_for_g[[classOfInterest]]<-the_g_
### list population ended
#print("-----")
}
#print("###### The list ######")
#print(list_for_g)
max_of_score = which.max(list_for_g)
#print(max_of_score)
return(max_of_score)
}
test_sample = matrix(c(75, 75, 105), nrow=3, ncol=1, byrow = TRUE)
predictedClass = generateClassForTestSample(test_sample)
sprintf("Predcited class is %s", predictedClass)
rm(list=ls(all=T))
generateClassForTestSample<- function(sample_param)
{
### the list for holding final values
list_for_g <- list()
###
rgb_training_data = read.csv("hw4all/img-train.txt", sep=",")
rgb_training_data_matrix = as.matrix(rgb_training_data)
#print(rgb_training_data_matrix$R)
rgb_classes=rgb_training_data$Class
#print(rgb_classes)
classes=unique(rgb_classes)
#print(classes)
for (classCount in 1:length(classes) )
{
#print(rgb_training_data_matrix)
### no of total samples satrted
no_of_samples_total=nrow(rgb_training_data_matrix)
#print(no_of_samples_total)
### no of total samples ended
classOfInterest =  classes[classCount]
#print("-----")
#print(classOfInterest)
full_sub_matrix_for_class =  rgb_training_data_matrix[rgb_training_data_matrix[, "Class"] == classOfInterest,]
#print(full_sub_matrix_for_class)
with_header_rgb_sub_matrix_for_class<-as.matrix(full_sub_matrix_for_class[,-4])
rgb_sub_matrix_for_class <- matrix(with_header_rgb_sub_matrix_for_class, ncol = ncol(with_header_rgb_sub_matrix_for_class), dimnames = NULL)
#print(rgb_sub_matrix_for_class)
## no. of actual samples fro class started
no_of_samples_for_class=nrow(rgb_sub_matrix_for_class)
#print(no_of_samples_for_class)
## no of actual samples for class ended
### proba. of each class started
proba_class  =  no_of_samples_for_class / no_of_samples_total
#print(proba_class)
### proba. of each class ended
###covariance started
cov_rgb_for_class = cov(rgb_sub_matrix_for_class, y=rgb_sub_matrix_for_class)
#print(cov_rgb_for_class)
###covariance ended
# mean of 'R' in 'RGB' for class started
r_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 1]
mean_r_for_class = mean(r_rgb_sub_matrix_for_class)
#print(mean_r_for_class)
# mean of 'R' in 'RGB' for class ended
# mean of 'G' in 'RGB' for class started
g_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 2]
mean_g_for_class = mean(g_rgb_sub_matrix_for_class)
#print(mean_g_for_class)
# mean of 'G' in 'RGB' for class ended
# mean of 'B' in 'RGB' for class started
b_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 3]
mean_b_for_class = mean(b_rgb_sub_matrix_for_class)
#print(mean_b_for_class)
# mean of 'B' in 'RGB' for class ended
# Determinant of covariance started
det_cov_rgb_for_class = det(cov_rgb_for_class)
#print(det_cov_rgb_for_class)
# Detrminant of covariance ended
# Inverse of covariance started
inv_cov_rgb_for_class = solve(cov_rgb_for_class)
#print(inv_cov_rgb_for_class)
# Incverse of covariance ended
## mu_i matrix constructed
mu_matrix_for_class = matrix(c(mean_r_for_class, mean_g_for_class, mean_b_for_class), nrow=3, ncol=1, byrow = TRUE)
#print(mu_matrix_for_class)
### subtraction from test sample by mu_matrix
subtracted_matrix = sample_param - mu_matrix_for_class
#print(subtracted_matrix)
transposed_subtracted_mat_for_class  = t(subtracted_matrix)
#print(transposed_mu_mat_for_class)
## mu_i matrix ended
### test multiplication of matrices started
# formula:
the_g_ = -0.5*(transposed_subtracted_mat_for_class %*%  inv_cov_rgb_for_class %*% subtracted_matrix) +
log(proba_class) -
(no_of_samples_total/2) * log(2*pi)  -
0.5*(log(det_cov_rgb_for_class))
#print(the_g_)
### test multiplication of matrices ended
#if (the_miltipled_ >=100.00)
#{
#print("blah blah")
#print(the_miltipled_)
#}
##### ln(det_matrix) started
#ln_determinant_class  = log(det_cov_rgb_for_class)
#print(ln_determinant_class)
##### ln(det_matrix) ended
### list population started
list_for_g[[classOfInterest]]<-the_g_
### list population ended
#print("-----")
}
#print("###### The list ######")
#print(list_for_g)
max_of_score = which.max(list_for_g)
#print(max_of_score)
return(max_of_score)
}
test_sample = matrix(c(105, 75, 105), nrow=3, ncol=1, byrow = TRUE)
predictedClass = generateClassForTestSample(test_sample)
sprintf("Predcited class is %s", predictedClass)
rm(list=ls(all=T))
generateClassForTestSample<- function(sample_param)
{
### the list for holding final values
list_for_g <- list()
###
rgb_training_data = read.csv("hw4all/img-train.txt", sep=",")
rgb_training_data_matrix = as.matrix(rgb_training_data)
#print(rgb_training_data_matrix$R)
rgb_classes=rgb_training_data$Class
#print(rgb_classes)
classes=unique(rgb_classes)
#print(classes)
for (classCount in 1:length(classes) )
{
#print(rgb_training_data_matrix)
### no of total samples satrted
no_of_samples_total=nrow(rgb_training_data_matrix)
#print(no_of_samples_total)
### no of total samples ended
classOfInterest =  classes[classCount]
#print("-----")
#print(classOfInterest)
full_sub_matrix_for_class =  rgb_training_data_matrix[rgb_training_data_matrix[, "Class"] == classOfInterest,]
#print(full_sub_matrix_for_class)
with_header_rgb_sub_matrix_for_class<-as.matrix(full_sub_matrix_for_class[,-4])
rgb_sub_matrix_for_class <- matrix(with_header_rgb_sub_matrix_for_class, ncol = ncol(with_header_rgb_sub_matrix_for_class), dimnames = NULL)
#print(rgb_sub_matrix_for_class)
## no. of actual samples fro class started
no_of_samples_for_class=nrow(rgb_sub_matrix_for_class)
#print(no_of_samples_for_class)
## no of actual samples for class ended
### proba. of each class started
proba_class  =  no_of_samples_for_class / no_of_samples_total
#print(proba_class)
### proba. of each class ended
###covariance started
cov_rgb_for_class = cov(rgb_sub_matrix_for_class, y=rgb_sub_matrix_for_class)
#print(cov_rgb_for_class)
###covariance ended
# mean of 'R' in 'RGB' for class started
r_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 1]
mean_r_for_class = mean(r_rgb_sub_matrix_for_class)
#print(mean_r_for_class)
# mean of 'R' in 'RGB' for class ended
# mean of 'G' in 'RGB' for class started
g_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 2]
mean_g_for_class = mean(g_rgb_sub_matrix_for_class)
#print(mean_g_for_class)
# mean of 'G' in 'RGB' for class ended
# mean of 'B' in 'RGB' for class started
b_rgb_sub_matrix_for_class = rgb_sub_matrix_for_class[, 3]
mean_b_for_class = mean(b_rgb_sub_matrix_for_class)
#print(mean_b_for_class)
# mean of 'B' in 'RGB' for class ended
# Determinant of covariance started
det_cov_rgb_for_class = det(cov_rgb_for_class)
#print(det_cov_rgb_for_class)
# Detrminant of covariance ended
# Inverse of covariance started
inv_cov_rgb_for_class = solve(cov_rgb_for_class)
#print(inv_cov_rgb_for_class)
# Incverse of covariance ended
## mu_i matrix constructed
mu_matrix_for_class = matrix(c(mean_r_for_class, mean_g_for_class, mean_b_for_class), nrow=3, ncol=1, byrow = TRUE)
#print(mu_matrix_for_class)
### subtraction from test sample by mu_matrix
subtracted_matrix = sample_param - mu_matrix_for_class
#print(subtracted_matrix)
transposed_subtracted_mat_for_class  = t(subtracted_matrix)
#print(transposed_mu_mat_for_class)
## mu_i matrix ended
### test multiplication of matrices started
# formula:
the_g_ = -0.5*(transposed_subtracted_mat_for_class %*%  inv_cov_rgb_for_class %*% subtracted_matrix) +
log(proba_class) -
(no_of_samples_total/2) * log(2*pi)  -
0.5*(log(det_cov_rgb_for_class))
#print(the_g_)
### test multiplication of matrices ended
#if (the_miltipled_ >=100.00)
#{
#print("blah blah")
#print(the_miltipled_)
#}
##### ln(det_matrix) started
#ln_determinant_class  = log(det_cov_rgb_for_class)
#print(ln_determinant_class)
##### ln(det_matrix) ended
### list population started
list_for_g[[classOfInterest]]<-the_g_
### list population ended
#print("-----")
}
#print("###### The list ######")
#print(list_for_g)
max_of_score = which.max(list_for_g)
#print(max_of_score)
return(max_of_score)
}
test_sample = matrix(c(105, 120, 105), nrow=3, ncol=1, byrow = TRUE)
predictedClass = generateClassForTestSample(test_sample)
sprintf("Predcited class is %s", predictedClass)
